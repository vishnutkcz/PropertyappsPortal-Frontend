{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, Optional, Inject, Injectable, PLATFORM_ID, Directive, Host, Self, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i1$1 from 'ng-gallery';\nimport { ImageItem, GalleryModule } from 'ng-gallery';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ESCAPE, RIGHT_ARROW, LEFT_ARROW } from '@angular/cdk/keycodes';\nimport { Subject, from, EMPTY, Subscription, fromEvent } from 'rxjs';\nimport * as i2 from '@angular/cdk/overlay';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/platform-browser';\nimport { debounceTime, switchMap, map, tap, finalize } from 'rxjs/operators';\n\nconst _c0 = function (a0, a1) {\n  return {\n    startAnimationTime: a0,\n    exitAnimationTime: a1\n  };\n};\n\nconst _c1 = function (a0, a1) {\n  return {\n    value: a0,\n    params: a1\n  };\n};\n\nconst LIGHTBOX_CONFIG = new InjectionToken('LIGHTBOX_CONFIG');\nconst lightboxAnimation = trigger('lightbox', [state('void, exit', style({\n  opacity: 0,\n  transform: 'scale(0.7)'\n})), state('enter', style({\n  transform: 'none'\n})), transition('* => enter', animate('{{startAnimationTime}}ms cubic-bezier(0, 0, 0.2, 1)', style({\n  transform: 'none',\n  opacity: 1\n}))), transition('* => void, * => exit', animate('{{exitAnimationTime}}ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n  opacity: 0\n})))]);\nlet LightboxComponent = /*#__PURE__*/(() => {\n  class LightboxComponent {\n    constructor(_document, _focusTrapFactory, _elementRef) {\n      this._document = _document;\n      this._focusTrapFactory = _focusTrapFactory;\n      this._elementRef = _elementRef;\n      /** State of the lightbox animation. */\n\n      this.state = 'enter';\n\n      this._savePreviouslyFocusedElement();\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n\n\n    onAnimationDone(event) {\n      if (event.toState === 'enter') {\n        this._trapFocus();\n      } else {\n        this.overlayRef.dispose();\n\n        this._restoreFocus();\n      }\n    }\n    /** Moves the focus inside the focus trap. */\n\n\n    _trapFocus() {\n      if (!this._focusTrap) {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n      } // If were to attempt to focus immediately, then the content of the lightbox would not yet be\n      // ready in instances where change detection has to run first. To deal with this, we simply\n      // wait for the microtask queue to be empty.\n\n\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n    /** Saves a reference to the element that was focused before the lightbox was opened. */\n\n\n    _savePreviouslyFocusedElement() {\n      if (this._document) {\n        this._elementFocusedBeforeDialogWasOpened = this._document.activeElement; // Note that there is no focus method when rendering on the server.\n\n        if (this._elementRef.nativeElement.focus) {\n          // Move focus onto the lightbox immediately in order to prevent the user from accidentally\n          // opening multiple dialogs at the same time. Needs to be async, because the element\n          // may not be focusable immediately.\n          Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n        }\n      }\n    }\n    /** Restores focus to the element that was focused before the lightbox opened. */\n\n\n    _restoreFocus() {\n      const toFocus = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n      if (toFocus && typeof toFocus.focus === 'function') {\n        toFocus.focus();\n      }\n\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n    }\n\n  }\n\n  LightboxComponent.ɵfac = function LightboxComponent_Factory(t) {\n    return new (t || LightboxComponent)(i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(i1.ConfigurableFocusTrapFactory), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  LightboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LightboxComponent,\n    selectors: [[\"lightbox\"]],\n    hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\"],\n    hostVars: 12,\n    hostBindings: function LightboxComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵsyntheticHostListener(\"@lightbox.done\", function LightboxComponent_animation_lightbox_done_HostBindingHandler($event) {\n          return ctx.onAnimationDone($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", \"lightbox-\" + ctx.id)(\"role\", ctx.role)(\"aria-labelledby\", ctx.ariaLabel ? null : ctx.ariaLabelledBy)(\"aria-label\", ctx.ariaLabel)(\"aria-describedby\", ctx.ariaDescribedBy || null);\n        i0.ɵɵsyntheticHostProperty(\"@lightbox\", i0.ɵɵpureFunction2(9, _c1, ctx.state, i0.ɵɵpureFunction2(6, _c0, ctx.startAnimationTime, ctx.exitAnimationTime)));\n      }\n    },\n    decls: 2,\n    vars: 4,\n    consts: [[3, \"id\", \"destroyRef\", \"skipInitConfig\"], [\"aria-label\", \"Close\", 1, \"g-btn-close\", 3, \"innerHTML\", \"click\"]],\n    template: function LightboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"gallery\", 0)(1, \"i\", 1);\n        i0.ɵɵlistener(\"click\", function LightboxComponent_Template_i_click_1_listener() {\n          return ctx.overlayRef.detach();\n        });\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"id\", ctx.id)(\"destroyRef\", false)(\"skipInitConfig\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"innerHTML\", ctx.closeIcon, i0.ɵɵsanitizeHtml);\n      }\n    },\n    dependencies: [i1$1.GalleryComponent],\n    styles: [\"lightbox{position:relative;display:block;width:1100px;height:800px;max-width:94vw;max-height:90vh;border-radius:4px;overflow:hidden;box-shadow:0 11px 15px -7px #0003,0 24px 38px 3px #00000024,0 9px 46px 8px #0000001f}  lightbox:focus{outline:none}  lightbox gallery{overflow:hidden;margin:0;display:block;width:100%;height:100%}  .g-backdrop{background-color:#00000052}  .fullscreen{width:100%}  .fullscreen   lightbox{max-width:none;max-width:initial;max-height:none;max-height:initial;position:fixed;top:0;left:0;bottom:0;right:0;height:100%;width:100%;border-radius:0}  .g-overlay{margin:auto}@media only screen and (max-width: 480px){  .g-overlay{width:100%}  .g-overlay   lightbox{max-width:none;max-width:initial;max-height:none;max-height:initial;position:fixed;top:0;left:0;bottom:0;right:0;height:100%;width:100%;border-radius:0}}  .g-btn-close{position:absolute;right:.9em;top:.9em;z-index:60;cursor:pointer;width:20px;height:20px}@media only screen and (max-width: 480px){  .g-btn-close{right:.7em;top:.7em}}\"],\n    data: {\n      animation: [lightboxAnimation]\n    },\n    changeDetection: 0\n  });\n  return LightboxComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst defaultConfig = {\n  backdropClass: 'g-backdrop',\n  panelClass: 'g-overlay',\n  hasBackdrop: true,\n  keyboardShortcuts: true,\n  role: 'lightbox',\n  startAnimationTime: 150,\n  exitAnimationTime: 75,\n  closeIcon: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"512px\" height=\"512px\" enable-background=\"new 0 0 47.971 47.971\" version=\"1.1\" viewBox=\"0 0 47.971 47.971\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<path d=\"M28.228,23.986L47.092,5.122c1.172-1.171,1.172-3.071,0-4.242c-1.172-1.172-3.07-1.172-4.242,0L23.986,19.744L5.121,0.88   c-1.172-1.172-3.07-1.172-4.242,0c-1.172,1.171-1.172,3.071,0,4.242l18.865,18.864L0.879,42.85c-1.172,1.171-1.172,3.071,0,4.242   C1.465,47.677,2.233,47.97,3,47.97s1.535-0.293,2.121-0.879l18.865-18.864L42.85,47.091c0.586,0.586,1.354,0.879,2.121,0.879   s1.535-0.293,2.121-0.879c1.172-1.171,1.172-3.071,0-4.242L28.228,23.986z\" fill=\"#fff\"/>\n</svg>\n`\n};\nlet Lightbox = /*#__PURE__*/(() => {\n  class Lightbox {\n    constructor(config, _gallery, _overlay, _sanitizer) {\n      this._gallery = _gallery;\n      this._overlay = _overlay;\n      this._sanitizer = _sanitizer;\n      /** Stream that emits when lightbox is opened */\n\n      this.opened = new Subject();\n      /** Stream that emits when lightbox is closed */\n\n      this.closed = new Subject();\n      this._config = config ? Object.assign(Object.assign({}, defaultConfig), config) : defaultConfig;\n    }\n    /**\r\n     * Set Lightbox Config\r\n     * @param config - LightboxConfig\r\n     */\n\n\n    setConfig(config) {\n      this._config = Object.assign(Object.assign({}, this._config), config);\n    }\n    /**\r\n     * Open Lightbox Overlay\r\n     * @param i - Current Index\r\n     * @param id - Gallery ID\r\n     * @param config - Lightbox Config\r\n     */\n\n\n    open(i = 0, id = 'lightbox', config) {\n      const _config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;\n\n      const overlayConfig = {\n        backdropClass: _config.backdropClass,\n        panelClass: _config.panelClass,\n        hasBackdrop: _config.hasBackdrop,\n        positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n        scrollStrategy: this._overlay.scrollStrategies.block(),\n        disposeOnNavigation: true\n      };\n\n      const galleryRef = this._gallery.ref(id);\n\n      galleryRef.setConfig({\n        reserveGesturesAction: true\n      });\n      galleryRef.set(i);\n      this._overlayRef = this._overlay.create(overlayConfig); // overlay opened event\n\n      this._overlayRef.attachments().subscribe(() => this.opened.next(id)); // overlay closed event\n\n\n      this._overlayRef.detachments().subscribe(() => this.closed.next(id)); // Attach gallery to the overlay\n\n\n      const galleryPortal = new ComponentPortal(LightboxComponent);\n\n      const lightboxRef = this._overlayRef.attach(galleryPortal);\n\n      lightboxRef.instance.id = id;\n      lightboxRef.instance.overlayRef = this._overlayRef;\n      lightboxRef.instance.closeIcon = this._sanitizer.bypassSecurityTrustHtml(this._config.closeIcon);\n      lightboxRef.instance.role = this._config.role;\n      lightboxRef.instance.ariaLabel = this._config.ariaLabel;\n      lightboxRef.instance.ariaLabelledBy = this._config.ariaLabelledBy;\n      lightboxRef.instance.ariaDescribedBy = this._config.ariaDescribedBy;\n      lightboxRef.instance.startAnimationTime = this._config.startAnimationTime;\n      lightboxRef.instance.exitAnimationTime = this._config.exitAnimationTime;\n\n      if (_config.hasBackdrop) {\n        this._overlayRef.backdropClick().subscribe(() => this.close());\n      } // Add keyboard shortcuts\n\n\n      if (_config.keyboardShortcuts) {\n        this._overlayRef.keydownEvents().subscribe(event => {\n          switch (event.keyCode) {\n            case LEFT_ARROW:\n              galleryRef.prev();\n              break;\n\n            case RIGHT_ARROW:\n              galleryRef.next();\n              break;\n\n            case ESCAPE:\n              this.close();\n          }\n        });\n      }\n    }\n    /**\r\n     * Close Lightbox Overlay\r\n     */\n\n\n    close() {\n      if (this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n      }\n    }\n\n  }\n\n  Lightbox.ɵfac = function Lightbox_Factory(t) {\n    return new (t || Lightbox)(i0.ɵɵinject(LIGHTBOX_CONFIG, 8), i0.ɵɵinject(i1$1.Gallery), i0.ɵɵinject(i2.Overlay), i0.ɵɵinject(i3.DomSanitizer));\n  };\n\n  Lightbox.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Lightbox,\n    factory: Lightbox.ɵfac\n  });\n  return Lightbox;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet GallerizeDirective = /*#__PURE__*/(() => {\n  class GallerizeDirective {\n    constructor(_zone, _el, _gallery, _lightbox, _renderer, platform, _document, _galleryCmp) {\n      this._zone = _zone;\n      this._el = _el;\n      this._gallery = _gallery;\n      this._lightbox = _lightbox;\n      this._renderer = _renderer;\n      this._document = _document;\n      this._galleryCmp = _galleryCmp;\n      /** Default gallery id */\n\n      this._galleryId = 'lightbox';\n      /** The selector used to query images elements */\n\n      this.selector = 'img'; // Set gallerize mode\n\n      if (isPlatformBrowser(platform)) {\n        this._mode = _galleryCmp ? \"gallery\"\n        /* GallerizeMode.Gallery */\n        : \"detector\"\n        /* GallerizeMode.Detector */\n        ;\n      }\n    }\n\n    ngOnInit() {\n      this._zone.runOutsideAngular(() => {\n        this._galleryId = this.gallerize || this._galleryId;\n\n        const ref = this._gallery.ref(this._galleryId);\n\n        switch (this._mode) {\n          case \"detector\"\n          /* GallerizeMode.Detector */\n          :\n            this.detectorMode(ref);\n            break;\n\n          case \"gallery\"\n          /* GallerizeMode.Gallery */\n          :\n            this.galleryMode(ref);\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      switch (this._mode) {\n        case \"detector\"\n        /* GallerizeMode.Detector */\n        :\n          this._detector$.complete();\n\n          this._observer$.disconnect();\n\n          break;\n\n        case \"gallery\"\n        /* GallerizeMode.Gallery */\n        :\n          this._itemClick$.unsubscribe();\n\n          this._itemChange$.unsubscribe();\n\n      }\n    }\n    /** Gallery mode: means `gallerize` directive is used on `<gallery>` component\r\n     * Adds a click event to each gallery item so it opens in lightbox */\n\n\n    galleryMode(galleryRef) {\n      // Clone its items to the new gallery instance\n      this._itemClick$ = this._galleryCmp.galleryRef.itemClick.subscribe(i => this._lightbox.open(i, this._galleryId));\n      this._itemChange$ = this._galleryCmp.galleryRef.itemsChanged.subscribe(state => galleryRef.load(state.items));\n    }\n    /** Detector mode: means `gallerize` directive is used on a normal HTMLElement\r\n     *  Detects images and adds a click event to each image so it opens in the lightbox */\n\n\n    detectorMode(galleryRef) {\n      this._detector$ = new Subject(); // Query image elements\n\n      this._detector$.pipe(debounceTime(300), switchMap(() => {\n        /** get all img elements from content */\n        const imageElements = this._el.nativeElement.querySelectorAll(this.selector);\n\n        if (imageElements && imageElements.length) {\n          const images = [];\n          return from(imageElements).pipe(map((el, i) => {\n            // Add click event to the image\n            this._renderer.setStyle(el, 'cursor', 'pointer');\n\n            this._renderer.setProperty(el, 'onclick', () => this._zone.run(() => this._lightbox.open(i, this._galleryId)));\n\n            if (el instanceof HTMLImageElement) {\n              // If element is type of img use the src property\n              return {\n                src: el.getAttribute('imageSrc') || el.src,\n                thumb: el.getAttribute('thumbSrc') || el.src\n              };\n            } else {\n              // Otherwise, use element background-image url\n              const elStyle = el.currentStyle || this._document.defaultView.getComputedStyle(el, null);\n\n              const background = elStyle.backgroundImage.slice(4, -1).replace(/\"/g, '');\n              return {\n                src: el.getAttribute('imageSrc') || background,\n                thumb: el.getAttribute('thumbSrc') || background\n              };\n            }\n          }), tap(data => images.push(new ImageItem(data))), finalize(() => galleryRef.load(images)));\n        } else {\n          return EMPTY;\n        }\n      })).subscribe(); // Observe content changes\n\n\n      this._observer$ = new MutationObserver(() => this._detector$.next());\n\n      this._observer$.observe(this._el.nativeElement, {\n        childList: true,\n        subtree: true\n      });\n    }\n\n  }\n\n  GallerizeDirective.ɵfac = function GallerizeDirective_Factory(t) {\n    return new (t || GallerizeDirective)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1$1.Gallery), i0.ɵɵdirectiveInject(Lightbox), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i1$1.GalleryComponent, 11));\n  };\n\n  GallerizeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: GallerizeDirective,\n    selectors: [[\"\", \"gallerize\", \"\"]],\n    inputs: {\n      gallerize: \"gallerize\",\n      selector: \"selector\"\n    }\n  });\n  return GallerizeDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LightboxDirective = /*#__PURE__*/(() => {\n  class LightboxDirective {\n    constructor(_lightbox, _el, _renderer) {\n      this._lightbox = _lightbox;\n      this._el = _el;\n      this._renderer = _renderer;\n      this.clickEvent = Subscription.EMPTY;\n      this.index = 0;\n      this.id = 'root';\n    }\n\n    ngOnInit() {\n      this._renderer.setStyle(this._el.nativeElement, 'cursor', 'pointer');\n\n      this.clickEvent = fromEvent(this._el.nativeElement, 'click').pipe(tap(() => this._lightbox.open(this.index, this.id))).subscribe();\n    }\n\n    ngOnDestroy() {\n      this.clickEvent.unsubscribe();\n    }\n\n  }\n\n  LightboxDirective.ɵfac = function LightboxDirective_Factory(t) {\n    return new (t || LightboxDirective)(i0.ɵɵdirectiveInject(Lightbox), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  LightboxDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LightboxDirective,\n    selectors: [[\"\", \"lightbox\", \"\"]],\n    inputs: {\n      index: [\"lightbox\", \"index\"],\n      id: [\"gallery\", \"id\"]\n    }\n  });\n  return LightboxDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LightboxModule = /*#__PURE__*/(() => {\n  class LightboxModule {\n    static withConfig(config) {\n      return {\n        ngModule: LightboxModule,\n        providers: [{\n          provide: LIGHTBOX_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n\n  }\n\n  LightboxModule.ɵfac = function LightboxModule_Factory(t) {\n    return new (t || LightboxModule)();\n  };\n\n  LightboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LightboxModule\n  });\n  LightboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [Lightbox],\n    imports: [OverlayModule, GalleryModule, A11yModule]\n  });\n  return LightboxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { GallerizeDirective, LIGHTBOX_CONFIG, Lightbox, LightboxComponent, LightboxDirective, LightboxModule }; //# sourceMappingURL=ng-gallery-lightbox.mjs.map","map":null,"metadata":{},"sourceType":"module"}